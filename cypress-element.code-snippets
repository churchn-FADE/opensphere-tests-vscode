{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Element is visible": {
		"scope": "javascript,typescript",
		"prefix": "vis",
		"body": "cy.get($1).should('be.visible')$0",
		"description": "Element should be visible"
	},
	"Element is NOT visible": {
		"scope": "javascript,typescript",
		"prefix": "nvis",
		"body": "cy.get($1).should('not.be.visible')$0",
		"description": "Element should NOT be visible"
	},
	"Element exists": {
		"scope": "javascript,typescript",
		"prefix": "exi",
		"body": "cy.get($1).should('exist')$0",
		"description": "Element should exist"
	},
	"Element does NOT exist": {
		"scope": "javascript,typescript",
		"prefix": "nexi",
		"body": "cy.get($1).should('not.exist')$0",
		"description": "Element should NOT exist"
	},
	"Element contains": {
		"scope": "javascript,typescript",
		"prefix": "con",
		"body": "cy.get($1).should('contain', '$2')$0",
		"description": "Element should contain text"
	},
	"Element does NOT contain": {
		"scope": "javascript,typescript",
		"prefix": "ncon",
		"body": "cy.get($1).should('not.contain', '$2')$0",
		"description": "Element should NOT contain text"
	},
	"Element has value": {
		"scope": "javascript,typescript",
		"prefix": "val",
		"body": "cy.get($1).should('have.value', '$2')$0",
		"description": "Element should have value"
	},
	"Element does NOT have value": {
		"scope": "javascript,typescript",
		"prefix": "nval",
		"body": "cy.get($1).should('not.have.value', '$2')$0",
		"description": "Element should have value"
	},
	"Element has class": {
		"scope": "javascript,typescript",
		"prefix": "cla",
		"body": "cy.get($1).should('have.class', $2)$0",
		"description": "Element should have class"
	},
	"Element does NOT have class": {
		"scope": "javascript,typescript",
		"prefix": "ncla",
		"body": "cy.get($1).should('not.have.class', $2)$0",
		"description": "Element should NOT have class"
	},
	"Element has attribute": {
		"scope": "javascript,typescript",
		"prefix": "att",
		"body": "cy.get($1).should('have.attr', '$2', '$3')$0",
		"description": "Element should have attribute"
	},
	"Element does NOT have attribute": {
		"scope": "javascript,typescript",
		"prefix": "natt",
		"body": "cy.get($1).should('not.have.attr', '$2', '$3')$0",
		"description": "Element should NOT have attribute"
	},
	"Click element": {
		"scope": "javascript,typescript",
		"prefix": "cli",
		"body": "cy.get($1).click()$0",
		"description": "Click on element"
	},
	"Right click element": {
		"scope": "javascript,typescript",
		"prefix": "rcli",
		"body": "cy.get($1).rightClick()$0",
		"description": "Right click on element"
	},
	"Clear element": {
		"scope": "javascript,typescript",
		"prefix": "cle",
		"body": "cy.get($1).clear()$0",
		"description": "Clear current text in element"
	},
	"Type into element": {
		"scope": "javascript,typescript",
		"prefix": "typ",
		"body": "cy.get($1).type('$2')$0",
		"description": "Enter text into element"
	},
	"Get element text": {
		"scope": "javascript,typescript",
		"prefix": "get",
		"body": [
			"cy.get($1).then(($$2 => {",
			"    const $3 = $$2.text()",
			"    $4 // do something here to change the state of the element",
			"    $0 // make an assertion here about the element",
			"}))"
		],
		"description": "Store the value of the element"
	}
}