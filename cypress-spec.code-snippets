{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New spec file": {
		"scope": "javascript,typescript",
		"prefix": "spec",
		"body": [
            "var os = require('../../support/selectors.js')",
            "",
            "describe('$1', function () {",
            "",
            "    before('Open opensphere', function () {",
            "       cy.login()",
            "    })",
            "",
            "    it('should $2', function () {",
            "        // Setup",
            "        $0",
            "",
            "        // Test",
            "",
            "",
            "        // Clean up",
            "",
            "    })",
            "})"
        ],
		"description": "Template for new spec file"
    },
    "Add describe": {
		"scope": "javascript,typescript",
		"prefix": "desc",
		"body": [
            "describe('$1', function () {",
            "",
            "    it('should $2', function () {",
            "        // Setup",
            "        $0",
            "",
            "        // Test",
            "",
            "",
            "        // Clean up",
            "",
            "    })",
            "})"
        ],
		"description": "Add describe block"
    },
    "Add it": {
		"scope": "javascript,typescript",
		"prefix": "it",
		"body": [
            "it('should $1', function () {",
            "    // Setup",
            "    $2",
            "",
            "    // Test",
            "",
            "",
            "    // Clean up",
            "",
            "})$0",
        ],
		"description": "Add it block"
    },
    "Handle exception": {
		"scope": "javascript,typescript",
		"prefix": "exc",
		"body": [
            "// Remove exception handling promptly after referenced issue(s) have been resolved.",
            "cy.on('uncaught:exception', (err, runnable) => {",
            "// Re-opening the timeline throws an error, #$1",
            "if (err.message.includes('$2')){",
            "    expect(err.message).to.include('$2')",
            "    return false",
            "}",
            "return true",
        "})"
        ],
		"description": "Add exception handling"
	}
}