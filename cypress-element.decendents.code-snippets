{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Decendent of element is visible": {
		"scope": "javascript,typescript",
		"prefix": "dvis",
		"body": "cy.get($1).find($2).should('be.visible')$0",
		"description": "Decendent of element should be visible"
	},
	"Decendent of element is NOT visible": {
		"scope": "javascript,typescript",
		"prefix": "dnvis",
		"body": "cy.get($1).find($2).should('not.be.visible')$0",
		"description": "Decendent of element should NOT be visible"
	},
	"Decendent of element exists": {
		"scope": "javascript,typescript",
		"prefix": "dexi",
		"body": "cy.get($1).find($2).should('exist')$0",
		"description": "Decendent of element should exist"
	},
	"Decendent of element does NOT exist": {
		"scope": "javascript,typescript",
		"prefix": "dnexi",
		"body": "cy.get($1).find($2).should('not.exist')$0",
		"description": "Decendent of element should NOT exist"
	},
	"Decendent of element contains": {
		"scope": "javascript,typescript",
		"prefix": "dcon",
		"body": "cy.get($1).find($2).should('contain', '$3')$0",
		"description": "Decendent of element should contain text"
	},
	"Decendent of element does NOT contain": {
		"scope": "javascript,typescript",
		"prefix": "dncon",
		"body": "cy.get($1).find($2).should('not.contain', '$3')$0",
		"description": "Decendent of element should NOT contain text"
	},
	"Decendent of element has value": {
		"scope": "javascript,typescript",
		"prefix": "dval",
		"body": "cy.get($1).find($2).should('have.value', '$3')$0",
		"description": "Decendent of element should have value"
	},
	"Decendent of element does NOT have value": {
		"scope": "javascript,typescript",
		"prefix": "dnval",
		"body": "cy.get($1).find($2).should('not.have.value', '$3')$0",
		"description": "Decendent of element should have value"
	},
	"Decendent of element has class": {
		"scope": "javascript,typescript",
		"prefix": "dcla",
		"body": "cy.get($1).find($2).should('have.class', $3)$0",
		"description": "Decendent of element should have class"
	},
	"Decendent of element does NOT have class": {
		"scope": "javascript,typescript",
		"prefix": "dncla",
		"body": "cy.get($1).find($2).should('not.have.class', $3)$0",
		"description": "Decendent of element should NOT have class"
	},
	"Decendent of element has attribute": {
		"scope": "javascript,typescript",
		"prefix": "datt",
		"body": "cy.get($1).find($2).should('have.attr', '$3', '$4')$0",
		"description": "Decendent of element should have attribute"
	},
	"Decendent of element does NOT have attribute": {
		"scope": "javascript,typescript",
		"prefix": "dnatt",
		"body": "cy.get($1).find($2).should('not.have.attr', '$3', '$4')$0",
		"description": "Decendent of element should NOT have attribute"
	},
	"Click decendent of element": {
		"scope": "javascript,typescript",
		"prefix": "dcli",
		"body": "cy.get($1).find($2).click()$0",
		"description": "Click on decendent of element"
	},
	"Clear decendent of element": {
		"scope": "javascript,typescript",
		"prefix": "dcle",
		"body": "cy.get($1).find($2).clear()$0",
		"description": "Clear current text in decendent of element"
	},
	"Type into decendent of element": {
		"scope": "javascript,typescript",
		"prefix": "dtyp",
		"body": "cy.get($1).find($2).type('$3')$0",
		"description": "Enter text into decendent of element"
	},
	"Get decendent of element text": {
		"scope": "javascript,typescript",
		"prefix": "dget",
		"body": [
			"cy.get($1).find($2).then(($$3 => {",
			"    const $4 = $$3.text()",
			"    $5 // do something here to change the state of the element",
			"    $0 // make an assertion here about the element",
			"}))"
		],
		"description": "Store the value of the decendent element"
	}
}