{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Decendent of element is visible": {
		"scope": "javascript,typescript",
		"prefix": "dvis",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .should('be.visible')$0"
    ],
		"description": "Decendent of element should be visible"
	},
	"Decendent of element is NOT visible": {
		"scope": "javascript,typescript",
		"prefix": "dnvis",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .should('not.be.visible')$0"
    ],
		"description": "Decendent of element should NOT be visible"
	},
	"Decendent of element exists": {
		"scope": "javascript,typescript",
		"prefix": "dexi",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .should('exist')$0"
    ],
      "description": "Decendent of element should exist"
	},
	"Decendent of element does NOT exist": {
		"scope": "javascript,typescript",
		"prefix": "dnexi",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .should('not.exist')$0"
    ],
		"description": "Decendent of element should NOT exist"
	},
	"Decendent of element contains": {
		"scope": "javascript,typescript",
		"prefix": "dcon",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .should('contain', '${3:<Enter text here>}')$0"
    ],
		"description": "Decendent of element should contain text"
	},
	"Decendent of element does NOT contain": {
		"scope": "javascript,typescript",
		"prefix": "dncon",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .should('not.contain', '${3:<Enter text here>}')$0"
    ],
		"description": "Decendent of element should NOT contain text"
	},
	"Decendent of element is empty": {
		"scope": "javascript,typescript",
		"prefix": "demp",
		"body": [
      "cy.get(${1:'<Enter an element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .should('be.empty')$0"
    ],
		"description": "Element should be empty"
	},
	"Decendent of element has value": {
		"scope": "javascript,typescript",
		"prefix": "dval",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .should('have.value', '${3:<Enter text here>}')$0"
    ],
		"description": "Decendent of element should have value"
	},
	"Decendent of element does NOT have value": {
		"scope": "javascript,typescript",
		"prefix": "dnval",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .should('not.have.value', '${3:<Enter text here>}')$0"
    ],
		"description": "Decendent of element should have value"
	},
	"Decendent of element has class": {
		"scope": "javascript,typescript",
		"prefix": "dcla",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .should('have.class', ${3:'<Enter class here>'})$0"
    ],
		"description": "Decendent of element should have class"
	},
	"Decendent of element does NOT have class": {
		"scope": "javascript,typescript",
		"prefix": "dncla",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .should('not.have.class', ${3:'<Enter class here>'})$0"
    ],
		"description": "Decendent of element should NOT have class"
	},
	"Decendent of element has attribute": {
		"scope": "javascript,typescript",
		"prefix": "datt",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .should('have.attr', '${3:<Enter attribute name here>}', '${4:<Enter attribute value here>}')$0"
    ],
		"description": "Decendent of element should have attribute"
	},
	"Decendent of element does NOT have attribute": {
		"scope": "javascript,typescript",
		"prefix": "dnatt",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .should('not.have.attr', '${3:<Enter attribute name here>}', '${4:<Enter attribute value here>}')$0"
    ],
		"description": "Decendent of element should NOT have attribute"
	},
	"Click decendent of element": {
		"scope": "javascript,typescript",
		"prefix": "dcli",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'}).click()$0"
    ],
		"description": "Click on decendent of element"
	},
	"Right click decendent element": {
		"scope": "javascript,typescript",
		"prefix": "drcli",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'}).rightClick()$0"
    ],
		"description": "Right click on decendent element"
	},
	"Clear decendent of element": {
		"scope": "javascript,typescript",
		"prefix": "dcle",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'}).clear()$0"
    ],
		"description": "Clear current text in decendent of element"
	},
	"Type into decendent of element": {
		"scope": "javascript,typescript",
		"prefix": "dtyp",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .type('${3:<Enter text here>}')$0"
    ],
		"description": "Enter text into decendent of element"
	},
	// Example: cy.get(<selector>).invoke('text').should('match', /<regex>/)
	"Invoke function on decendent of element": {
		"scope": "javascript,typescript",
		"prefix": "dinv",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .invoke('${3:<Enter function name here>}')$0"
    ],
		"description": "Invoke a function on an element decendent"
	},
	// This is used when the initial state of the element will be used during the test.
	// It should only be used if the initial element state cannot be known until runtime.
	// A common scenario is to make note of the current element, change something, then compare to the original state.
	// Another example would be using the initial element state to predict a future element state.
	"Get current element decendent state": {
		"scope": "javascript,typescript",
		"prefix": "dget",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .then(($${3:enterNameOfElementHere} => {",
			"    const ${4:enterNameOfElementPropertyHere} = $${3:enterNameOfElementHere}.text()",
			"    ${5:// <Do something here to change the state of the element>}",
      "    cy.get(${1:'<Enter a parent element selector here>'})",
      "      .find(${2:'<Enter a child element selector here>'})",
      "      .should('not.contain', ${4:enterNameOfElementPropertyHere})$0 // <Get the element again, compare to the original element>",
			"  }))"
		],
		"description": "Get element decendent, take an action, use previous element value in an assertion"
  },
  "Log element decendent text to Cypress": {
		"scope": "javascript,typescript",
		"prefix": "dlog",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .then(($element => {cy.log($element.text())}))"
    ],
		"description": "Write an element's decendent text contents to the log"
  },
  "Log element decendent value to Cypress": {
		"scope": "javascript,typescript",
		"prefix": "dlog",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "  .find(${2:'<Enter a child element selector here>'})",
      "  .then(($element => {cy.log($element.val())}))"
    ],
		"description": "Write an element's decendent value to the log"
	}
}